[[pipeline]]

== CI/CD Pipeline

****
IMPORTANT: *TODO*

For this exercise we will be using some downloadable information - explain the mechanics to the attendees as it is done
Show the https://github.com/utherp0/workshop_material repo - explain the need for it (the groovy_pipeline.sh script will pre-install the application, pre-install the pipeline and kick-off the download of the Jenkins container
Explain (as with the slides) the role that the ‘pipeline’ type of build plays - an extended mechanism to allow the whole CICD chain to be encompassed in a single, repeatable OCP build

****

In your chosen CLI, let's get the workshop workshop_material:

[source,shell]
----
mkdir ocp_workshop
cd ocp_workshop
git clone https://github.com/utherp0/workshop_material
cd workshop_material/attendee
ls
----

****
IMPORTANT: *TODO*

Explain what the script does. Explain the need for the pipeline_complex_bc.yaml file (and the alternative ways of injecting the pipeline script into the buildconfig)

****

[source,shell]
----
cat groovy_pipeline.sh
----

****
IMPORTANT: *TODO*

Explain the need for changing the namespace - the fact namespaces are unique within a cluster.

****

[source,shell]
----
sed -i 's/PROJECT.NAME/pipeline-userX/g' groovy_pipeline.sh
cat groovy_pipeline.sh
----

You should now see the PROJECT.NAME being replaced by your unique name.

[source,shell]
----
sed -i 's/PROJECT.NAME/pipeline-userX/g' pipeline_complex_bc.yaml
----

Before we run the script, make sure you are still connected to the OCP Cluster:

[source,shell]
----
oc whoami
----

Then run the script

[source,shell]
----
./groovy_pipeline.sh
----

****
INFO:

The script installs the nodetest app then waits for it to appear, and then installs and starts the pipeline process

****

Once the process has started, go to the Web Console and select the `pipeline-userX` project.

In the menu:Overview[] page you will see the Jenkins Ephemeral Pod being started up.

****
IMPORTANT: *TODO*

Explain why it takes so long and what it is doing - the creation of a build config that had a pipeline type automatically creates the Jenkins Pod if one doesn’t exist

****

Once the Jenkins Pod is deployed (so the kbd:[Pod ring] is dark blue), click on the `route` link to go to Jenkins.

Back in the Web Console, go to menu:Builds[Pipelines]. Here you can see the pipeline running.

****
IMPORTANT: *TODO*

Explain what each is doing, refer to the Groovy script

****

****
IMPORTANT: If the pipeline does not complete, look at the naming convention of the project. You can fix it in the `pipeline_complex_bc.yaml` with the correct name then:

[source,shell]
----
oc delete bc {old_name}
oc create -f pipeline_complex_bc.yaml
----
****

[UI] Overview - show the six pods running, point out the deployment number, Discuss the removal of the triggers on the deployment and why (with automation in place the creation of an image would force a deployment which would interfere with the pipeline, we disable the deployment on image and config triggers so the pipeline can control it all)
Discuss complexities of pipelines, the addition of Jenkins commands into the Groovy etc
[UI] Go back to the Jenkins Route - select Open Blue Ocean. Choose the Pipeline, click on the build, show the prettier Jenkins UI
[UI] Builds/Pipelines - click on complexpipeline - Actions/Edit
[UI] Replace the line ‘dc,scale(“--replicas=6”)’ with ‘dc.scale(“--replicas=4”)’
[UI] Start Pipeline, then switch to Overview
Explain what is happening, show the Pod count changing
